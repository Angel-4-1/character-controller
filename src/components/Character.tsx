/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/character.glb -o src/components/Character.jsx -r public
*/
import { useAnimations, useGLTF } from "@react-three/drei";
import React, { useEffect, useRef } from "react";
import { Avatar } from "./Avatar";

// @ts-ignore
export function Character({ animation, ...props }) {
  const group = useRef();

  /* Model */
  const { nodes, materials, scene } = useGLTF("/models/avatar_pumkin2.glb");
  useEffect(() => {
    scene.traverse((child) => {
      // @ts-ignore
      if (child.isMesh) {
        child.castShadow = true;
        child.receiveShadow = true;
      }
    });
  }, [scene]);
  
  /* Animations */
  const { animations } = useGLTF("/models/character/animations/characterAnimationsPlayStage.glb");
  const { actions } = useAnimations(animations, group);
  // @ts-ignore
  useEffect(() => {
    actions[animation]?.reset().fadeIn(0.24).play();
    return () => actions?.[animation]?.fadeOut(0.24);
  }, [animation]);
  
  return (
    // @ts-ignore
    <group ref={group} {...props} dispose={null}>
      {/* <primitive object={scene} scale={1.5} /> */}
      <Avatar />
    </group>
  );
}

useGLTF.preload("/models/character.glb");
